.hoverableText {
  cursor: pointer;
  position: relative;
  transition: all 0.3s ease;
  border-bottom: 1px dotted rgba(0, 123, 255, 0.3); /* No border-radius */
}

.hoverableText:hover {
  background-color: rgba(0, 123, 255, 0.05); /* More subtle background */
  /* border-radius: 3px; */ /* Removed border-radius */
  border-bottom: 1px dotted rgba(0, 123, 255, 0.7);
}

/* Styles for .hasResults on individual elements */
.hoverableText.hasResults {
  border-bottom: 1px dashed #007bff;
  /* Remove animations, these are now for chunks */
  animation: none; 
}

/* Styles for .isHovered on individual elements */
.hoverableText.isHovered {
  animation: none !important;
  background-color: rgba(0, 123, 255, 0.1) !important; 
  border-bottom-color: #007bff !important;
  box-shadow: none !important; /* Remove box-shadow for individual elements */
  /* border-radius: 2px; */ /* Removed border-radius */
}


/* Removing redundant wrapper styles - they duplicate hoverableText functionality */

/* Enhanced loading indicator (can be used by both chunk and individual element loading if needed) */
.loading {
  position: relative;
  background-size: 400% 400%;
  animation: loading-pulse 2s ease infinite;
  cursor: progress;
}

.loading::after {
  content: '';
  position: absolute;
  right: -8px;
  top: 50%;
  transform: translateY(-50%);
  width: 6px;
  height: 6px;
  border-radius: 50%;
  background-color: #007bff;
  animation: pulse 1s infinite;
  box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

@keyframes pulse {
  0% {
    opacity: 0.3;
  }
  50% {
    opacity: 1;
  }
  100% {
    opacity: 0.3;
  }
}

@keyframes loading-pulse {
  0% {
    background-color: transparent;
  }
  50% {
    background-color: rgba(13, 110, 253, 0.05);
  }
  100% {
    background-color: transparent;
  }
}

/* --- Styles for Chunk Containers --- */
.chunkContainer {
  position: relative;
  margin: 0.5rem 0; /* Add some space around chunks */
  padding: 0.5rem;  /* Padding inside the chunk border */
  border: 1px solid transparent;
  border-radius: 6px; /* Rounded corners for the chunk container */
  transition: all 0.3s ease;
}

.chunkHoverable { /* Base class for hoverable chunks, if needed */
  cursor: pointer;
}

.loadingChunk { /* Specific loading style for chunk container, can reuse .loading or define new */
  /* Example: opacity: 0.7; */
}

.hasResultsChunk { /* Applied to .chunkContainer when it has results */
  border: 1px solid rgba(0, 123, 255, 0.3);
  animation: chunkBreathing 3s infinite ease-in-out;
}

.isHoveredChunk { /* Applied to .chunkContainer when hovered */
  animation: none !important; /* Override breathing animation */
  background-color: rgba(0, 123, 255, 0.1) !important;
  border-color: rgba(0, 123, 255, 0.5) !important;
  box-shadow: 0 0 8px rgba(0, 123, 255, 0.2); /* Subtle glow for the chunk */
}

/* Chunk-level breathing animation */
@keyframes chunkBreathing {
  0% { 
    border-color: rgba(0, 123, 255, 0.2);
    background-color: rgba(0, 123, 255, 0.02);
    box-shadow: 0 0 3px rgba(0, 123, 255, 0.1);
  }
  50% { 
    border-color: rgba(0, 123, 255, 0.4);
    background-color: rgba(0, 123, 255, 0.05);
    box-shadow: 0 0 6px rgba(0, 123, 255, 0.15);
  }
  100% { 
    border-color: rgba(0, 123, 255, 0.2);
    background-color: rgba(0, 123, 255, 0.02);
    box-shadow: 0 0 3px rgba(0, 123, 255, 0.1);
  }
}

/* Dark mode chunk breathing */
@keyframes chunkBreathingDark {
  0% { 
    border-color: rgba(64, 156, 255, 0.25);
    background-color: rgba(64, 156, 255, 0.03);
    box-shadow: 0 0 3px rgba(64, 156, 255, 0.15);
  }
  50% { 
    border-color: rgba(64, 156, 255, 0.45);
    background-color: rgba(64, 156, 255, 0.08);
    box-shadow: 0 0 6px rgba(64, 156, 255, 0.2);
  }
  100% { 
    border-color: rgba(64, 156, 255, 0.25);
    background-color: rgba(64, 156, 255, 0.03);
    box-shadow: 0 0 3px rgba(64, 156, 255, 0.15);
  }
}

/* Remove old individual element animations if they are still referenced */
@keyframes subtleWink { /* Kept if used elsewhere, but .hasResults (element-level) won't use it */
  0% { background-color: rgba(0, 123, 255, 0.05); }
  50% { background-color: rgba(0, 123, 255, 0.15); }
  100% { background-color: rgba(0, 123, 255, 0.05); }
}

@keyframes breathingHighlight { /* Kept if used elsewhere */
  0% {
    background-color: transparent;
    box-shadow: none;
  }
  50% {
    background-color: rgba(0, 123, 255, 0.1);
    box-shadow: 0 0 4px rgba(0, 123, 255, 0.2);
  }
  100% {
    background-color: transparent;
    box-shadow: none;
  }
}

@keyframes breathingHighlightDark { /* Kept if used elsewhere */
  0% {
    background-color: transparent;
    box-shadow: none;
  }
  50% {
    background-color: rgba(64, 156, 255, 0.15);
    box-shadow: 0 0 4px rgba(64, 156, 255, 0.3);
  }
  100% {
    background-color: transparent;
    box-shadow: none;
  }
}

/* Style for when similar content is found */
.hasResults {
  border-bottom: 1px dashed #007bff;
  animation: subtleWink 2s ease-in-out infinite, breathingHighlight 3s infinite ease-in-out;
  border-bottom: 1px dotted rgba(13, 110, 253, 0.5);
}

/* Apply subtle highlight to chunks */
.highlightedChunk {
  background-color: rgba(0, 123, 255, 0.08);
  border-left: 2px solid rgba(0, 123, 255, 0.4);
  padding-left: 5px;
  border-radius: 3px;
  transition: all 0.3s ease;
}

.highlightedChunk:hover {
  background-color: rgba(0, 123, 255, 0.15);
}

/* Dark mode support */
:global(.dark-mode) .hoverableText:hover {
  background-color: rgba(255, 255, 255, 0.05); /* More subtle */
  border-bottom-color: rgba(100, 181, 246, 0.7);
}

:global(.dark-mode) .hoverableText.hasResults {
  border-bottom-color: #45a9ff;
}

:global(.dark-mode) .hoverableText.isHovered {
  background-color: rgba(255, 255, 255, 0.1) !important;
  border-bottom-color: #45a9ff !important;
}

:global(.dark-mode) .loading::after {
  background-color: #45a9ff;
}

:global(.dark-mode) .highlightedChunk {
  background-color: rgba(100, 149, 237, 0.08);
  border-left: 2px solid rgba(100, 149, 237, 0.4);
}

/* Dark mode for chunk containers */
html[data-bs-theme="dark"] .hasResultsChunk {
  border-color: rgba(64, 156, 255, 0.35);
  animation: chunkBreathingDark 3s infinite ease-in-out;
}

html[data-bs-theme="dark"] .isHoveredChunk {
  background-color: rgba(64, 156, 255, 0.15) !important;
  border-color: rgba(64, 156, 255, 0.55) !important;
  box-shadow: 0 0 8px rgba(64, 156, 255, 0.25);
}


/* Apply dark mode animation to elements with hasResults class in dark mode */
/* This rule might be redundant if .hasResults (element-level) no longer animates */
html[data-bs-theme="dark"] .hasResults { 
  /* animation: subtleWink 2s ease-in-out infinite, breathingHighlightDark 3s infinite ease-in-out; */
  /* Element-level .hasResults no longer animates by default with these changes */
}

/* Styling for hoverable text with similarity results */
.hoverableTextWrapper { /* This class is on the span wrapper for individual elements */
  position: relative;
  /* cursor: pointer; */ /* cursor is on .hoverableText now */
  /* transition: background-color 0.3s ease; */
  /* border-radius: 2px; */ /* Removed */
}

/* .hoverableText:hover, .hoverableTextWrapper:hover { */
  /* background-color: rgba(13, 110, 253, 0.1); */ /* Handled by .hoverableText:hover */
/* } */

/* Specific styles for similarity mode */
.similarity-mode p { /* This is a general style, might need review if it conflicts */
  transition: all 0.3s ease;
  margin-bottom: 1rem;
  border-radius: 4px;
}

.similarity-mode p:hover {
  background-color: rgba(13, 110, 253, 0.1);
}

/* Override breathing animation with a fixed, stronger highlight */
/* This .isHovered is for individual elements, ensure it doesn't have rounded borders or unwanted animations */
.isHovered {
  animation: none !important;
  /* background-color: rgba(0, 123, 255, 0.2) !important; */ /* Adjusted in .hoverableText.isHovered */
  /* box-shadow: 0 0 4px rgba(0, 123, 255, 0.5) !important; */ /* Adjusted in .hoverableText.isHovered */
  /* border-radius: 2px; */ /* Removed */
}

/* Ensure that markdown content within a chunk container doesn't get unexpected margins from .hoverableText if it's applied by mistake */
.chunkContainer .hoverableText {
  border-bottom: none; /* Override individual styling if it somehow gets applied inside a chunk */
}
.chunkContainer .hoverableText:hover {
  background-color: transparent; /* Override individual styling */
}